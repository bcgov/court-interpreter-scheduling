apiVersion: v1
kind: Template
labels:
  template: postgresql-persistent-template
metadata:
  creationTimestamp: null
  name: ${NAME}
  labels:
    app: ${NAME}
    build: ${INSTANCE}
    template: ${NAME}-template
    project: ${PROJECT}
parameters:
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: NAME
  required: true
  value: "postgresqlfw"
- description: The OpenShift ImageStream name.
  displayName: IMAGE_STREAM_NAME
  name: IMAGE_STREAM_NAME
  value: "postgresql"
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: "openshift"
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  required: true
  value: "developer"
- description: Admin Username for PostgreSQL user that will be used for accessing
    the database.
  displayName: PostgreSQL Admin Connection Username
  name: POSTGRESQL_ADMIN_USER
  required: true
  value: "postgres"
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Password for the PostgreSQL admin user.
  displayName: PostgreSQL Admin Connection Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: POSTGRESQL_ADMIN_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: "court-interpreter-scheduler"
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: "3Gi"
- description: Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).
  displayName: Version of PostgreSQL Image
  name: IMAGE_STREAM_VERSION
  required: true
  value: '10'
- name: CPU_LIMIT
  value: "500m"
- name: MEMORY_LIMIT
  value: "1Gi"
- name: CPU_REQUEST
  value: "200m"
- name: MEMORY_REQUEST
  value: "512Mi"
- name: REPLICAS
  value: "1"
- name: MAX_REPLICAS
  value: "1"
- name: BUILD_ID
  value: "1"
- name: INSTANCE
  value: ""
- name: PROJECT
  value: "api-court-interpreter-scheduler"
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "${NAME}"
    labels:
      app: ${NAME}
      instance: ${INSTANCE}
      project: ${PROJECT}
  stringData:
    database-name: "${POSTGRESQL_DATABASE}"
    database-password: "${POSTGRESQL_PASSWORD}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
    name: "${NAME}"
    labels:
      app: ${NAME}
      instance: ${INSTANCE}
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: "${NAME}"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${NAME}"
    labels:
      app: ${NAME}
      instance: ${INSTANCE}
      project: ${PROJECT}
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${NAME}"
    labels:
      app: ${NAME}
      instance: ${INSTANCE}
      project: ${PROJECT}
  spec:
    replicas: "${{REPLICAS}}"
    selector:
      name: "${NAME}"
    strategy:
      type: Recreate
      maxSurge: 50%
      maxUnavailable: 0
    template:
      metadata:
        labels:
          name: "${NAME}"
      spec:
        containers:
        - capabilities: {}
          env:
          - name: BUILD_ID
            value: ${BUILD_ID}
          - name: POSTGRESQL_USER
            value: "${POSTGRESQL_USER}"
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: "${NAME}"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: "${NAME}"
          image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              cpu: "${CPU_REQUEST}"
              memory: "${MEMORY_REQUEST}"
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
          - mountPath: "/var/lib/pgsql/data"
            name: "${NAME}-data"
          - mountPath: "/var/run/postgresql"
            name: "${NAME}-run"
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: "${NAME}-data"
          persistentVolumeClaim:
            claimName: "${NAME}"
        - name: "${NAME}-run"
          emptyDir: {}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: "${IMAGE_STREAM_NAME}:${IMAGE_STREAM_VERSION}"
          namespace: "${IMAGE_STREAM_NAMESPACE}"
        lastTriggeredImage: ''
      type: ImageChange
    - type: ConfigChange
  status: {}