apiVersion: v1
kind: Template
metadata:
  labels:
    app: ${NAME}
    build: ${INSTANCE}
    template: ${NAME}-template
    project: ${PROJECT}
  name: app-court-interpreter-scheduler
parameters:
  - name: NAME
    displayName: Name
    description: A suffix appended to all objects
    required: true
    value: app-court-interpreter-scheduler
  - name: VERSION
    required: true
    value: "1.0"
  - name: CPU_LIMIT
    value: "1000m"
  - name: MEMORY_LIMIT
    value: "1Gi"
  - name: CPU_REQUEST
    value: "750m"
  - name: MEMORY_REQUEST
    value: "1Gi"
  - name: REPLICAS
    value: "1"
  - name: MAX_REPLICAS
    value: "1"
  - name: PORT
    value: "7070"
  - name: APP_PORT_DEFAULT
    value: "7070-tcp"
  - name: APP_PORT_OTHER
    value: "8088-tcp"
  - name: TAG
    description: Deployment image tag
    value: "1"
  - name: BUILD_ID
    value: "1"
  - name: INSTANCE
    value: ""
  - name: HOST_NAME
    required: true
    value: "dev-court-interpreter-scheduler.pathfinder.gov.bc.ca"
  - name: PROJECT
    value: "court-interpreter-scheduler"
  - name: API_HOST
    required: true
    value: "NONE"
  - name: PATH
    required: true
    value: "/app"
objects:
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      annotations:
        description: Nodejs Runtime Image
      labels:
        app: ${NAME}
        instance: ${INSTANCE}
        shared: "true"
        project: ${PROJECT}
      creationTimestamp: null
      generation: 0
      name: ${NAME}
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: null
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftWebConsole
      creationTimestamp: null
      generation: 0
      labels: 
        app: ${NAME}
        instance: ${INSTANCE}
        project: ${PROJECT}
      name: ${NAME}
    spec:
      replicas: "${{REPLICAS}}"
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${NAME}
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources:
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
        type: Rolling
      template:
        metadata:
          annotations: null
          creationTimestamp: null
          labels:
            deploymentConfig: ${NAME}
        spec:
          containers:
            - env:
                - name: BUILD_ID
                  value: ${BUILD_ID}
                - name: APPLICATION_PORT
                  value: "${PORT}"
                - name: REACT_APP_API_URL
                  value: "${API_HOST}"
              image: " "
              imagePullPolicy: Always
              name: app
              ports:
                - containerPort: "${{PORT}}"
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                failureThreshold: 10
                httpGet:
                  path: /
                  port: "${{PORT}}"
                  scheme: HTTP
                initialDelaySeconds: 140
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 20
              livenessProbe:
                failureThreshold: 10
                httpGet:
                  path: /
                  port: "${{PORT}}"
                  scheme: HTTP
                initialDelaySeconds: 90
                periodSeconds: 30
                successThreshold: 1
                timeoutSeconds: 20
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /opt/app-root/app
                  name: ${NAME}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - emptyDir: {}
              name: ${NAME}
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - app
            from:
              kind: ImageStreamTag
              name: ${NAME}:${TAG}
          type: ImageChange
        - type: ConfigChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0
  - apiVersion: v1
    kind: Service
    metadata:
      annotations: null
      creationTimestamp: null
      labels:
        app: ${NAME}
        instance: ${INSTANCE}
        project: ${PROJECT}
      name: ${NAME}
    spec:
      ports:
        - name: ${NAME}-${APP_PORT_DEFAULT}
          port: "${{PORT}}"
          protocol: TCP
          targetPort: "${{PORT}}"
        - name: ${APP_PORT_OTHER}
          port: 8088
          protocol: TCP
          targetPort: 8088
      selector:
        deploymentconfig: ${NAME}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      annotations: {}
      creationTimestamp: null
      labels:
        app: ${NAME}
        instance: ${INSTANCE}
        project: ${PROJECT}
      name: ${NAME}
    spec:
      host: ${HOST_NAME}
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      port:
        targetPort: ${NAME}-${APP_PORT_DEFAULT}
      to:
        kind: Service
        name: ${NAME}
        weight: 100
      wildcardPolicy: None
