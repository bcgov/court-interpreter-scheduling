"""added_interpreter_language_table

Revision ID: e15dc8fa858a
Revises: 8706729850e5
Create Date: 2021-12-22 13:31:54.010280

"""
from alembic import op
import sqlalchemy as sa
import json
import os
import pandas
from datetime import date

# revision identifiers, used by Alembic.
revision = 'e15dc8fa858a'
down_revision = '8706729850e5'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    interpreter_table = op.create_table('interpreter',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_by', sa.String(), nullable=True),
        sa.Column('last_name', sa.String(), nullable=True),
        sa.Column('first_name', sa.String(), nullable=True),
        sa.Column('address', sa.String(), nullable=True),
        sa.Column('city', sa.String(), nullable=True),
        sa.Column('province', sa.String(), nullable=True),
        sa.Column('postal_code', sa.String(), nullable=True),
        sa.Column('home_phone', sa.String(), nullable=True),
        sa.Column('business_phone', sa.String(), nullable=True),
        sa.Column('cell_phone', sa.String(), nullable=True),
        sa.Column('email', sa.String(), nullable=True),
        sa.Column('supplier_no', sa.String(), nullable=True),
        sa.Column('site_code', sa.String(), nullable=True),
        sa.Column('gst_no', sa.String(), nullable=True),
        sa.Column('comments', sa.String(), nullable=True),
        sa.Column('crc_check_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('crc_comment', sa.String(), nullable=True),
        sa.Column('contract_valid', sa.Boolean(), nullable=False),
        sa.Column('contract_comment', sa.String(), nullable=True),
        sa.Column('completed_training', sa.Boolean(), nullable=False),
        sa.Column('fax', sa.String(), nullable=True),
        sa.Column('admin_comment', sa.String(), nullable=True),
        sa.Column('address_longitude', sa.Float(), nullable=True),
        sa.Column('address_latitude', sa.Float(), nullable=True),
        sa.Column('geo_service', sa.String(), nullable=True),
        sa.Column('disabled', sa.Boolean(), nullable=False, default=False),
        
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_interpreter_id'), 'interpreter', ['id'], unique=False)
    
    language_table = op.create_table('language',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_by', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_language_id'), 'language', ['id'], unique=False)
    op.create_index(op.f('ix_language_name'), 'language', ['name'], unique=True)
    
    interpreter_language_table = op.create_table('interpreter_language',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('language_id', sa.Integer(), nullable=True),
        sa.Column('interpreter_id', sa.Integer(), nullable=True),
        sa.Column('level', sa.Integer(), nullable=False),
        sa.Column('language', sa.String(), nullable=True),
        sa.Column('comment_on_level', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['interpreter_id'], ['interpreter.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['language_id'], ['language.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_interpreter_language_id'), 'interpreter_language', ['id'], unique=False)
    # ### end Alembic commands ###

    # Seed Data
    make_relations(interpreter_table, language_table, interpreter_language_table)   

def seed_interpreter_spoken():
    filepath = os.getcwd()+'/alembic/seeds/SpokenLanguageDirectorySept_2022_CIS.xlsx'
    excel_data_fragment = pandas.read_excel(filepath, sheet_name='2022', engine='openpyxl')
    json_str = excel_data_fragment.to_json()
    json_content = json.loads(json_str)
    
    items  = [
        {'label':'LEVEL', 'field':'level', 'field2':'completed_training', 'field3':'fax', 'field4':'updated_by'},
        {'label':'LANGUAGE', 'field':'language'},
        {'label':'LAST NAME', 'field':'last_name'},
        {'label':'FIRST NAME', 'field':'first_name'},
        {'label':'ADDRESS', 'field':'address'},
        {'label':'CITY', 'field':'city'},
        {'label':'STATE', 'field':'province'},
        {'label':'POSTAL CODE', 'field':'postal_code'},
        {'label':'HOME PHONE', 'field':'home_phone'},
        {'label':'BUSINESS PHONE', 'field':'business_phone'},
        {'label':'CELL PHONE', 'field':'cell_phone'},
        {'label':'EMAIL ADDRESS', 'field':'email'},
        {'label':'SUPPLIER #', 'field':'supplier_no', 'comment':'site_code'},
        {'label':'GST', 'field':'gst_no'},
        {'label':'Criminal Record Check', 'field':'crc_check_date', 'comment':'crc_comment'},           
        {'label':'COMMENTS', 'field':'comments'},
        {'label':'Page 12 of contract received', 'field':'contract_valid', 'comment':'contract_comment'},
    ]

    data = list()

    for item in items:
        name = json_content[item['label']]
        for key in name:
            
            #LEVEL
            if item['label'] =='LEVEL':
                data.append({item['field']:name[key].strip(), item['field2']:False, item['field3']:None, item['field4']:'System'})   
            
            #SUPPLIER #
            elif item['label'] =='SUPPLIER #' and not isinstance(name[key], int) and name[key] is not None and 'site' in name[key].lower():
                words = name[key].lower().split('site') 
                words[0]=words[0].replace(",","") 
                data[int(key)][item['field']] = words[0].strip()
                data[int(key)][item['comment']] = words[1].strip()
            elif item['label'] =='SUPPLIER #' :
                data[int(key)][item['field']] = name[key]
                data[int(key)][item['comment']] = None

            #Criminal Record Check
            elif (item['label'] =='Criminal Record Check' and isinstance(name[key], int)):
                data[int(key)][item['field']] = date.fromtimestamp(28800+int(name[key])/1000)
                data[int(key)][item['comment']] = None           
            elif (item['label'] =='Criminal Record Check' and not isinstance(name[key], int)):                    
                data[int(key)][item['field']] = None
                data[int(key)][item['comment']] = name[key]
            
            #Page 12 of contract received
            elif (item['label'] =='Page 12 of contract received' and name[key].upper().strip() == 'YES'):
                data[int(key)][item['field']] = True
                data[int(key)][item['comment']] = None
            elif (item['label'] =='Page 12 of contract received' and name[key].upper().strip() == 'NO'):                
                data[int(key)][item['field']] = False
                data[int(key)][item['comment']] = None
            elif (item['label'] =='Page 12 of contract received'):
                data[int(key)][item['field']] = False
                if 'NO,' in name[key].upper().strip():
                    comment = name[key].replace('NO,', '')
                    comment = comment.replace('No,', '')
                    comment = comment.replace('no,', '')
                    data[int(key)][item['comment']] = comment
                elif 'YES,' in name[key].upper().strip():
                    comment = name[key].replace('YES,', '')
                    comment = comment.replace('Yes,', '')
                    comment = comment.replace('yes,', '')
                    data[int(key)][item['comment']] = comment
                else:
                    data[int(key)][item['comment']] = name[key]
            
            #OTHER Number
            elif isinstance(name[key], int) or name[key] is None:
                data[int(key)][item['field']] = name[key]
            
            #OTHER
            else:
                data[int(key)][item['field']] = name[key].strip()

    return data

def seed_interpreter_visual():
    filepath = os.getcwd()+'/alembic/seeds/VisualLanguageInterpretersList_as_of_ September14_2021e.xlsx'
    excel_data_fragment = pandas.read_excel(filepath, sheet_name='2021', engine='openpyxl')
    json_str = excel_data_fragment.to_json()
    json_content = json.loads(json_str)
    
    items  = [
        {'label':'Level', 'field':'level', 'field2':'crc_check_date', 'field3':'crc_comment', 'field4':'updated_by'},        
        {'label':'Completed court or legal training', 'field':'completed_training'},
        {'label':'LANGUAGE', 'field':'language'},
        {'label':'SUPPLIER #', 'field':'supplier_no', 'comment':'site_code'},
        {'label':'GST', 'field':'gst_no'},
        {'label':'LAST NAME', 'field':'last_name'},
        {'label':'FIRST NAME', 'field':'first_name'},
        {'label':'ADDRESS', 'field':'address'},
        {'label':'CITY', 'field':'city', 'state':'province'},
        {'label':'POSTAL CODE', 'field':'postal_code'},
        {'label':'HOME PHONE', 'field':'home_phone'},
        {'label':'WORK PHONE', 'field':'business_phone'},
        {'label':'CELL PHONE', 'field':'cell_phone'},
        {'label':'EMAIL ADDRESS', 'field':'email'},
        {'label':'FAX', 'field':'fax'},
        {'label':'COMMENTS', 'field':'comments'},
        {'label':'Page 12 contract received', 'field':'contract_valid', 'comment':'contract_comment'},
    ]

    data = list()

    for item in items:
        name = json_content[item['label']]
        for key in name:
            
            #LEVEL
            if item['label'] =='Level':
                data.append({item['field']:name[key].strip(), item['field2']:None, item['field3']:None, item['field4']:'System'})

            #SUPPLIER #
            elif item['label'] =='SUPPLIER #' and not isinstance(name[key], int) and name[key] is not None and 'site' in name[key].lower():
                words = name[key].lower().split('site') 
                words[0]=words[0].replace(",","") 
                data[int(key)][item['field']] = words[0].strip()
                data[int(key)][item['comment']] = words[1].strip()
            elif item['label'] =='SUPPLIER #' :
                data[int(key)][item['field']] = name[key]
                data[int(key)][item['comment']] = None

            #Completed court or legal training
            elif (item['label'] =='Completed court or legal training' and  name[key] is not None and name[key].upper().strip() == 'Y'):
                data[int(key)][item['field']] = True                
            elif (item['label'] =='Completed court or legal training'):                
                data[int(key)][item['field']] = False                
            
            #CITY
            elif (item['label'] =='CITY'):
                splited_text = name[key].split(',')
                data[int(key)][item['field']] = splited_text[0].strip()
                data[int(key)][item['state']] = splited_text[1].strip()
            
            #Page 12 contract received
            elif (item['label'] =='Page 12 contract received' and name[key].upper().strip() == 'YES'):
                data[int(key)][item['field']] = True
                data[int(key)][item['comment']] = None
            elif (item['label'] =='Page 12 contract received' and name[key].upper().strip() == 'NO'):                
                data[int(key)][item['field']] = False
                data[int(key)][item['comment']] = None
            elif (item['label'] =='Page 12 contract received'):
                data[int(key)][item['field']] = False
                if 'NO,' in name[key].upper().strip():
                    comment = name[key].replace('NO,', '')
                    comment = comment.replace('No,', '')
                    comment = comment.replace('no,', '')
                    data[int(key)][item['comment']] = comment
                else:
                    data[int(key)][item['comment']] = name[key]
            
            #OTHER Number
            elif isinstance(name[key], int) or name[key] is None:
                data[int(key)][item['field']] = name[key]
            
            #OTHER
            else:
                data[int(key)][item['field']] = name[key].strip()

    return data

def seed_languages():
    filepath = os.getcwd()+'/alembic/seeds/Languages.xlsx'
    excel_data_fragment = pandas.read_excel(filepath, sheet_name='Sheet1', engine='openpyxl')
    json_str = excel_data_fragment.to_json()
    json_content = json.loads(json_str)
    name = json_content['name']
    data = list()
    for key in name:        
        data.append({'id':int(key)+1, 'name':name[key].strip(), 'updated_by':'System'})

    return data   

def make_relations(interpreter_table, language_table, interpreter_language_table):
    
    languages_data = seed_languages()
    spoken = seed_interpreter_spoken()
    visual = seed_interpreter_visual()
    combined_interpreters = spoken+visual
   
    interpreters = list()
    interpreter_language = list()
    counter = 0 
    
    for interpreter in combined_interpreters:
        
        id_langguage=[lang for lang in languages_data if lang['name'].upper() == interpreter['language'].upper().strip()][0]['id']
        
        same_interpreter = [inter for inter in interpreters if (
            inter['first_name'].upper().strip() == interpreter['first_name'].upper().strip() and
            inter['last_name'].upper().strip() == interpreter['last_name'].upper().strip()            
        )]

        id_interpreter = 0
        if len(same_interpreter) == 0 :
            counter = counter+1
            interpreter['id']= counter            
            interpreters.append(interpreter)
            id_interpreter = counter
        else:
            id_interpreter = same_interpreter[0]['id']

        level_str = interpreter['level'].strip()
        level=0
        if level_str=="Level 1":
            level=1
        elif level_str=="Level 2":
            level=2
        elif level_str=="Level 3":
            level=3
        elif level_str=="Level 4":
            level=4        
        
        interpreter_language.append({
            'language_id':id_langguage, 
            'interpreter_id':id_interpreter, 
            'level':level, 
            'language':interpreter['language'].strip()
        })
   
    op.bulk_insert(interpreter_table, interpreters)
    op.bulk_insert(language_table, languages_data)
    op.bulk_insert(interpreter_language_table, interpreter_language)

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_interpreter_language_id'), table_name='interpreter_language')
    op.drop_table('interpreter_language')
    op.drop_index(op.f('ix_language_name'), table_name='language')
    op.drop_index(op.f('ix_language_id'), table_name='language')
    op.drop_table('language')
    op.drop_index(op.f('ix_interpreter_id'), table_name='interpreter')
    op.drop_table('interpreter')
    # ### end Alembic commands ###
